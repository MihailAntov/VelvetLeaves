// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VelvetLeaves.Data;

#nullable disable

namespace VelvetLeaves.Data.Migrations
{
    [DbContext(typeof(VelvetLeavesDbContext))]
    [Migration("20230721155508_AddedImageCollectionToProduct")]
    partial class AddedImageCollectionToProduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FavoritesId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUsersId", "FavoritesId");

                    b.HasIndex("FavoritesId");

                    b.ToTable("ApplicationUserProduct");
                });

            modelBuilder.Entity("ColorProductSeries", b =>
                {
                    b.Property<int>("DefaultColorsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSeriesId")
                        .HasColumnType("int");

                    b.HasKey("DefaultColorsId", "ProductSeriesId");

                    b.HasIndex("ProductSeriesId");

                    b.ToTable("ColorProductSeries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ProductsColors", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductsColors");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ColorId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            ColorId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            ColorId = 2
                        });
                });

            modelBuilder.Entity("ProductsMaterials", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ProductsMaterials");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            MaterialId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            MaterialId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            MaterialId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            MaterialId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            MaterialId = 3
                        },
                        new
                        {
                            ProductId = 5,
                            MaterialId = 4
                        },
                        new
                        {
                            ProductId = 6,
                            MaterialId = 4
                        },
                        new
                        {
                            ProductId = 7,
                            MaterialId = 4
                        });
                });

            modelBuilder.Entity("ProductsSeriesMaterials", b =>
                {
                    b.Property<int>("ProductSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("ProductSeriesId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ProductsSeriesMaterials");

                    b.HasData(
                        new
                        {
                            ProductSeriesId = 1,
                            MaterialId = 1
                        },
                        new
                        {
                            ProductSeriesId = 2,
                            MaterialId = 2
                        },
                        new
                        {
                            ProductSeriesId = 3,
                            MaterialId = 1
                        },
                        new
                        {
                            ProductSeriesId = 4,
                            MaterialId = 3
                        },
                        new
                        {
                            ProductSeriesId = 5,
                            MaterialId = 4
                        },
                        new
                        {
                            ProductSeriesId = 6,
                            MaterialId = 4
                        });
                });

            modelBuilder.Entity("ProductsSeriesTags", b =>
                {
                    b.Property<int>("ProductSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductSeriesId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductsSeriesTags");

                    b.HasData(
                        new
                        {
                            ProductSeriesId = 1,
                            TagId = 2
                        },
                        new
                        {
                            ProductSeriesId = 2,
                            TagId = 2
                        },
                        new
                        {
                            ProductSeriesId = 3,
                            TagId = 2
                        },
                        new
                        {
                            ProductSeriesId = 5,
                            TagId = 1
                        },
                        new
                        {
                            ProductSeriesId = 6,
                            TagId = 1
                        });
                });

            modelBuilder.Entity("ProductsTags", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductsTags");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            TagId = 1
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.AppPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaviconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootProductsName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AppPreferences");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "jewelry.jpg",
                            Name = "Jewelry"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "textile.jpg",
                            Name = "Textile"
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorValue")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorValue = "ff0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            ColorValue = "0000ff",
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            ColorValue = "00ff00",
                            Name = "Green"
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Galleries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Handcrafted jewelry made of silk cocoons",
                            ImageUrl = "silk.jpg",
                            Name = "Silk Cocoons"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Handcrafted jewelry made of glass",
                            ImageUrl = "glass.jpg",
                            Name = "Glass"
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.GalleryProduct", b =>
                {
                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("GalleryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("GalleriesProducts");

                    b.HasData(
                        new
                        {
                            GalleryId = 1,
                            ProductId = 1,
                            Position = 1
                        },
                        new
                        {
                            GalleryId = 1,
                            ProductId = 2,
                            Position = 2
                        },
                        new
                        {
                            GalleryId = 1,
                            ProductId = 3,
                            Position = 3
                        },
                        new
                        {
                            GalleryId = 2,
                            ProductId = 4,
                            Position = 1
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 2,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 2,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 2,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 3,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 3,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 4,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 4,
                            Url = "jewelry.jpg"
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 5,
                            Url = "bag.jpg"
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 5,
                            Url = "bag.jpg"
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 6,
                            Url = "bag.jpg"
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 6,
                            Url = "bag.jpg"
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 7,
                            Url = "bag.jpg"
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 7,
                            Url = "bag.jpg"
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Steel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Glass"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Textile"
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductSeriesId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Red earrings with silver frames.",
                            Name = "Red Silver Earrings",
                            Price = 50.00m,
                            ProductSeriesId = 1,
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Red-blue earrings with steel frames.",
                            Name = "Red-Blue Steel Earrings",
                            Price = 45.00m,
                            ProductSeriesId = 2,
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Green necklace with a silver frame.",
                            Name = "Green Silver Necklace",
                            Price = 35.00m,
                            ProductSeriesId = 3,
                            SubcategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Blue ring made out of glass and silver.",
                            Name = "Blue Glass Ring",
                            Price = 25.00m,
                            ProductSeriesId = 4,
                            SubcategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Hand bag with traditional sewing pattern.",
                            Name = "Traditional Hand Bag",
                            Price = 120.00m,
                            ProductSeriesId = 5,
                            SubcategoryId = 4
                        },
                        new
                        {
                            Id = 6,
                            Description = "Hand bag with traditional sewing pattern.",
                            Name = "Traditional Hand Bag",
                            Price = 120.00m,
                            ProductSeriesId = 5,
                            SubcategoryId = 4
                        },
                        new
                        {
                            Id = 7,
                            Description = "Blue book binding.",
                            Name = "Blue Book Binding",
                            Price = 70.00m,
                            ProductSeriesId = 6,
                            SubcategoryId = 5
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.ProductSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DefaultDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DefaultPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("ProductSeries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultDescription = "Earrings with silver frames.",
                            DefaultName = "Silver Earrings",
                            DefaultPrice = 50.00m,
                            Name = "Silver Earrings",
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            DefaultDescription = "Earrings with steel frames.",
                            DefaultName = "Steel Earrings",
                            DefaultPrice = 50.00m,
                            Name = "Steel Earrings",
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            DefaultDescription = "Necklace with a silver frame.",
                            DefaultName = "Silver Necklace",
                            DefaultPrice = 50.00m,
                            Name = "Silver Necklace",
                            SubcategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            DefaultDescription = "Ring made out of glass and silver.",
                            DefaultName = "Glass Ring",
                            DefaultPrice = 50.00m,
                            Name = "Glass Ring",
                            SubcategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            DefaultDescription = "Hand bag with traditional sewing pattern.",
                            DefaultName = "Traditional Bag",
                            DefaultPrice = 50.00m,
                            Name = "Traditional Bag",
                            SubcategoryId = 4
                        },
                        new
                        {
                            Id = 6,
                            DefaultDescription = "Book binding.",
                            DefaultName = "Book Binding",
                            DefaultPrice = 50.00m,
                            Name = "Book Binding",
                            SubcategoryId = 5
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ImageUrl = "jewelry.jpg",
                            Name = "Earings"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ImageUrl = "jewelry.jpg",
                            Name = "Necklaces"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ImageUrl = "jewelry.jpg",
                            Name = "Rings"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ImageUrl = "bag.jpg",
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            ImageUrl = "bag.jpg",
                            Name = "Book Bindings"
                        });
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Traditional Sewing Pattern"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Silk Cocoons"
                        });
                });

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorProductSeries", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("DefaultColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.ProductSeries", null)
                        .WithMany()
                        .HasForeignKey("ProductSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsColors", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsMaterials", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsSeriesMaterials", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.ProductSeries", null)
                        .WithMany()
                        .HasForeignKey("ProductSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsSeriesTags", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.ProductSeries", null)
                        .WithMany()
                        .HasForeignKey("ProductSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsTags", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Address", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.ApplicationUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.GalleryProduct", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Gallery", "Gallery")
                        .WithMany("GalleriesProducts")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Image", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Order", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Product", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.ProductSeries", "ProductSeries")
                        .WithMany("Products")
                        .HasForeignKey("ProductSeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VelvetLeaves.Data.Models.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSeries");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.ProductSeries", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Subcategory", "Subcategory")
                        .WithMany("ProductSeries")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Subcategory", b =>
                {
                    b.HasOne("VelvetLeaves.Data.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Category", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Gallery", b =>
                {
                    b.Navigation("GalleriesProducts");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.ProductSeries", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("VelvetLeaves.Data.Models.Subcategory", b =>
                {
                    b.Navigation("ProductSeries");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
